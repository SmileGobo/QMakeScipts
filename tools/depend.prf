#Функции для подключения заивисмостей

#Установка путей заголовочных файлов
defineTest(SetHeadersPath){
    PATHS = $$1 #Cписок путей
    isEmpty(PATHS){
        WARNING(SetHeadersPath: empty 1 arg)
        return (false)
    }

    for(p, PATHS){
        !contains(INCLUDEPATH, $$p){
            INCLUDEPATH += $$p
        }
    }
    export(INCLUDEPATH)
    return(true)
}

#Установка путей библиотек
defineTest(SetLibraryPath){
    PATHS = $$1 #список путей
    isEmpty(PATHS){
        WARNING(SetLibraryPaths: empty 1 arg)
        return (false)
    }
    for(p, PATHS){
        !contains(LIBS, -L$$p){
            LIBS += -L$$p
        }
    }
    export(LIBS)
    return (true)
}


#Подключение либ
defineTest(ImportModules){
# example:
#    PMODULES = Foundation Util Net XML JSON
#    ExportModules($$PMODULES, Poco)
#
    MODULES = $$1
    PREFIX = $$2
    SUFFIX = $${3}$${LIB_SUFFIX}

    for(mod, MODULES){
        LIBS += -l$${PREFIX}$${mod}$${SUFFIX}
    }
    export(LIBS)
    return (true)
}
#функция экспорта дополнительныйх путей
#BOOST_PATH POCO_PATH(устаревшие не использовать)
defineTest(ImportPaths){
    !isEmpty(BOOST_PATH){
        SetHeadersPath($$BOOST_PATH/include)
        SetLibraryPath($$BOOST_PATH/lib)
    }

    !isEmpty(POCO_PATH){
        SetHeadersPath($$POCO_PATH/include)
        SetLibraryPath($$POCO_PATH/lib)
    }
}


#включение флага для экспорта библиотек библиотек 
#example:
#LIBRARY_EXPORT{
#    ... #подключаем модули, нужно для бинарников
#}
#
defineTest(EnableModuleExport){
    CONFIG += LIBRARY_EXPORT
    export(CONFIG)
}

#Выключение флага экспорта либ
defineTest(DisableModuleExport){
    CONFIG -= LIBRARY_EXPORT
    export(CONFIG)
}

#Выключение суффикса d для библиотек в режиме сборки Debug
defineTest(DisableDebugSuffix){
    LIB_SUFFIX=
    export(LIB_SUFFIX)
    return (true)
}

#Включение суффикса d для библиотек в режиме сборки Debug
#Если сборка Release, проигнорируется
defineTest(EnableDebugSuffix){
    #планы на будущее
    #PREFIX = $$1
    #POSTFIX = $$2
    CONFIG(debug, debug|release) {
        #LIB_SIFFIX = $${PREFIX}d$${POSTFIX}
        LIB_SUFFIX=d
    } else {
        LIB_SUFFIX=                 #суффикс для библиотек d - для дебаг и пустой для release
    }

    export(LIB_SUFFIX)
    return(true)
}

#поиск и подключение файлов зависимостей
#TODO допилить
defineTest(GetDepends){
    return(false)
}
#управление группами библиотек
#VALUE (start|end)
defineTest(Group){
    !isEmpty(1){
        LIBS += $$sprintf("-Wl,--%1-group", $$1)
        export(LIBS)
        return (true)
    }
    else{
        return (false)
    }
}

#Загрузка зависимостей прокатит только для внутренних модулей проекта
#не работает этот механизм
defineTest(LoadDepends){
    DEPENDS_FILE = $$1

    DEPENDS_BASE_PATH=$$2
    isEmpty(DEPENDS_BASE_PATH){
        DEPENDS_BASE_PATH=.
    }
    include($$DEPENDS_FILE)
}

#добавление заголовочников локальных модулей проекта
#$$1 - список модулей (имена дирректорий от корня проекта)
defineTest(ImportLocalHeaders){
    MODS = $$1

    for(m, MODS){
        INC_PATH= $$clean_path($$BUILD_PATH/../$$m/Module/include)
        SetHeadersPath($$INC_PATH)
    }
    return (true)
}
